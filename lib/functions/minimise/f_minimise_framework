function f_minimise_framework(){

# About:
# - minify bash-x lib folder into one file.

# ---------------------------------------------
# [1] Remove any existing minimised script folder and /tmp files.

${spacer};
printf "%b\n" "${cyB}Minifier for bash-x framework.${rs}";

${spacer};
${equalsLine};
printf "%b\n" "${cyB}Step 1: Remove any existing minifier related files.${rs}";
${spacer};
printf "%b\t%s\n" "${yl}--> info:${rs} Remove any existing minified files in the /tmp folder:" "${cy}/tmp/bx-*${rs}";
printf "%b\t%s\n" "${yl}--> info:${rs} Remove any existing minified version of bash-x framework:" "${cy}${vf_path_bashx}${rs}";
rm -rf /tmp/bx-*;
if [[ -d "${vf_path_bashx}" ]];then 
    find "${vf_path_bashx}" ! -name '.git' -type d ! -path "${vf_path_bashx}/.git" ! -name 'README' ! -name 'README.md' -maxdepth 1 -mindepth 1 -exec rm -rf {} \;
fi;

# ---------------------------------------------
# [2] Create single file with all project function code.

${spacer};
${equalsLine};
printf "%b\n" "${cyB}Step 2: Create single file with all project function code.${rs}";
${spacer};
printf "%b\t%s\n" "${yl}--> info:${rs} Create an edit file:" "${cy}tmp/bx-framework${rs}";
printf "%b\n" "${yl}--> info:${rs} - append all function files to it except ones containing heredoc functions.";
printf "%b\n" "${yl}--> info:${rs} For each appended file:";
printf "%b\n" "${yl}--> info:${rs} - remove all newlines from the end of the file.";
printf "%b\n" "${yl}--> info:${rs} - ensure that the '}' on the last line is followed by a semicolon.";
printf "%b\n" "${yl}--> info:${rs} - add a final newline after the '};' and make it the last line of the file.";
${spacer};

# Loop through all framework functions and append these all to the file /temp/bash-x.
for filename in ${vf_path_framework_home}lib/functions/*/* 
do
    if [[ "${filename}" == *"f_minimise_"* ]]; then
        process="false";
    fi;
    if grep -qE '<< *EOF|cat *<< *EOF' ${filename}; then
        process="false";
    fi;
    if [[ "${process}" == "true" ]];then 
        
        # Remove all newlines from the end of the file.
        ${vf_cmd_sed} -i -e :a -e '/^\n*$/{$d;N;ba' -e '}' "${filename}";
        
        # Ensure that the '}' on the last line is followed by a semicolon if it's not already.
        ${vf_cmd_sed} -i '$s/}$/};/' "${filename}";
        
        # Add a final newline after the '};' and make it the last line of the file.
        ${vf_cmd_sed} -i -e '$a\' "${filename}";

        # Display to screen on same line the file in the loop.
        printf "\r${yl}--> Appending function file:${rs} %s" "${filename}";
        
        # Append the content to "/tmp/bx-framework".
        cat "${filename}" >> "/tmp/bx-framework";
        # Clear the line for the next iteration.
        printf "\033[K";
    fi;
    process="true";
done;
${spacer};

# ---------------------------------------------
# [3] Prepare the file for minimisation.

${spacer};
${equalsLine};
printf "%b\n" "${cyB}Step 3: Prepare the file for minimisation.${rs}";
${spacer};
printf "%b\t%s\n" "${yl}--> info:${rs} Create a copy of the bash-x main script:" "${cy}/tmp/bx-main${rs}";
printf "%b\n" "${yl}--> info:${rs} - remove from this file the hashbang.";
printf "%b\n" "${yl}--> info:${rs} From both '/tmp/bx-framework' and '/tmp/bx-main' remove:";
printf "%b\n" "${yl}--> info:${rs} - all comments.";
printf "%b\n" "${yl}--> info:${rs} - all empty lines.";
printf "%b\n" "${yl}--> info:${rs} - all trailing backslashes used to join lines.";

# Treat the bash-x script differently as it needs to be appended last.
cat ${vf_path_framework_home}lib/bash-x >> /tmp/bx-main;
# Remove bash hashbang.
gsed -i '1d' "/tmp/bx-main";

tmp_files=( "/tmp/bx-framework" "/tmp/bx-main" );

for filename in ${tmp_files[@]}
do
    # Remove the 'function' keyword from script.
    # This searches for 'function f_' and replaces with 'f_'.
    ${vf_cmd_sed} -i -e 's/function[[:space:]]\+f_/f_/g' "${filename}";

    # Remove all comments including the hashbang from the bash-x script.
    ${vf_cmd_sed} -e '/^\s*#/d' -e '/^#[^!].*$/d' -e :a -e '$!N;s/\n#.*$//;ta' -e 'P;D' -i "${filename}";

    # Remove all empty lines.
    ${vf_cmd_sed} -i -e '/^[[:space:]]*$/d' "${filename}";

    # Ensure semicolon after 'fi' and 'done'. 
    # - Its much easier to do this now rather than adding a rule post joining lines.
    ${vf_cmd_sed} -E -i "s/(^|[[:space:]])fi([[:space:]]|$)/\1fi;\2/" "${filename}";
    ${vf_cmd_sed} -E -i "s/(^|[[:space:]])done([[:space:]]|$)/\1done;\2/" "${filename}";

    # Remove all trailing backslashes that join lines and bring following line up.
    ${vf_cmd_sed} -i ':a;N;$!ba;s/\\\n//g' "${filename}";
done;

# ---------------------------------------------
# [4] Join the lines for both files.

${spacer};
${equalsLine};
printf "%b\n" "${cyB}Step 4: Join lines.${rs}";
${spacer};
printf "%b\n" "${yl}--> info:${rs} For both '/tmp/bx-framework' and '/tmp/bx-main':";
printf "%b\n" "${yl}--> info:${rs} - join each line to the one above.";
printf "%b\n" "${yl}--> info:${rs} - move each function onto own line for the .debug version of the minimised file.";

# Join each line to the one above.
f_utils_join_lines "/tmp/bx-framework";
f_utils_join_lines "/tmp/bx-main";

# For easier debugging, move each function onto its own line.
${vf_cmd_sed} -E -i 's/([a-zA-Z0-9_]+)\(\)\{/\n\1\(\)\{/g' "/tmp/bx-framework";
${vf_cmd_sed} -E -i 's/([a-zA-Z0-9_]+)\(\)\{/\n\1\(\)\{/g' "/tmp/bx-main";

# ---------------------------------------------
# [5] Make corrections to file so that it runs.

${spacer};
${equalsLine};
printf "%b\n" "${cyB}Step 5: Make final corrections.${rs}";
${spacer};
echo "${yl}--> info:${rs} Apply rules for both '/tmp/bx-framework' and '/tmp/bx-main':";
${spacer};
IFS=",";
a_correction_titles[0]="Strings that must be followed by a semicolon";
a_correction_titles[1]="Strings that must be preceded by a semicolon";
a_correction_titles[2]="Strings with one space and then a semicolon";
a_correction_titles[3]="Strings with no semicolons after them";
a_correction_titles[4]="Add semicolon after 'else' if followed by";
a_correction_titles[5]="Remove semicolon if found after";
a_correction_titles[6]="Remove semicolon if found after these special chars";
a_correction_titles[7]="Replace '; ;' with ';'";
a_correction_titles[8]="Remove semicolons between '{' and";
a_correction_titles[9]="Remove semicolons before '<<<' and";

a_correction_values[0]="done,fi";
a_correction_values[1]="do,done,case,fi";
a_correction_values[2]="for";
a_correction_values[3]="do,then,else";
a_correction_values[4]="if,while,until,case";
a_correction_values[5]="case";
a_correction_values[6]="&";
a_correction_values[7]="n/a";
a_correction_values[8]="if,case";
a_correction_values[9]="done";

count=0;
for f in ${tmp_files[@]}
do
   ((++count));
    for i in "${!a_correction_titles[@]}"
    do
        rule_num="${i}";
        rule_desc="${a_correction_titles[$i]}";
        rule_items="${a_correction_values[${rule_num}]}";

        if [[ "${count}" == "1" ]];then
            printf '%s\t %-50s\t %s\n' "${yl}--> rule: ${rule_num}${rs}" "${rule_desc}: ${about}" "${cy}${rule_items}${rs}";
        fi;

        edit_count=0;

        for e in $rule_items
        do
            case "${rule_num}" in
            # ---------------------------------------------------------------
            "0")
                ${vf_cmd_sed} -E -i "s/(^|[[:space:]])${e}([[:space:]]|$)/\1${e};\2/"        "${f}";;
            # ---------------------------------------------------------------
            "1")
                ${vf_cmd_sed} -E -i "s/;+\b${e}\b/; ${e}/g; s/([^;])\b${e}\b/\1; ${e}/g"     "${f}";;
            # ---------------------------------------------------------------
            "2")
                ${vf_cmd_sed} -E -i "s/;[[:space:]]*${e}/; ${e}/g"                           "${f}";;
            # ---------------------------------------------------------------
            "3")
                ${vf_cmd_sed} -E -i "s/${e}\s*;/${e} /g"                                     "${f}";;
            # ---------------------------------------------------------------
            "4")
                ${vf_cmd_sed} -E -i "s/${e}\s*;/${e} /g"                                     "${f}";;        
            # ---------------------------------------------------------------
            "5")
                ${vf_cmd_sed} -E -i "s/${e}\s*;/${e} /g"                                     "${f}";;  
            # ---------------------------------------------------------------
            "6")
                ${vf_cmd_sed} -E -i "s/\\${e}\s*;/\\${e} /g"                                 "${f}";;  
            # ---------------------------------------------------------------
            "7")
                ${vf_cmd_sed} -E -i "s/;[[:space:]]+;/;/g"                                   "${f}";;         
            # ---------------------------------------------------------------
            "8")
                ${vf_cmd_sed} -i "s/{\s*;\s*${e}/{ ${e}/g"                                   "${f}";;
            # ---------------------------------------------------------------
            "9")
                ${vf_cmd_sed} -E -i "s/${e};[[:space:]]*<<</${e} <<</g"                      "${f}";;

            esac;
        done;
    done;
    # Some whitespace and tab clearing.
    gsed -i -E \
        -e '/printf/ s/^/PRINTF_LINE: /' \
        -e '/^PRINTF_LINE: /!s/[ \t]+/ /g' \
        -e 's/;\s+/; /g' \
        -e 's/;;\s+/;; /g' \
        -e 's/\)\s+/\) /g' \
        -e 's/;\s+/; /g' \
        -e 's/\;\s+do/; do/g' \
        -e 's/fi\s+;/fi;/g' \
        -e 's/^PRINTF_LINE: //g' \
        "${f}";
done;
unset IFS;

# ---------------------------------------------
# [6] Create a debug copy of the file

cp /tmp/bx-framework /tmp/bx-framework.debug;

# Join each line to the one above for the final minimised file.
# The debug version is left with each function on its own line.
f_utils_join_lines "/tmp/bx-framework";

# ---------------------------------------------
# [7] Append the heredoc functions last as they cannot be minimised.

${spacer};
${equalsLine};
printf "%b\n" "${cyB}Step 6: Append the heredoc functions (cannot be minimised) to '/tmp/bx-framework'.${rs}";
${spacer};

for filename in ${vf_path_framework_home}lib/functions/*/* 
do
    if [[ "${filename}" == *"f_minimise_"* ]]; then
        process="true";
    fi;
    if grep -qE '<< *EOF|cat *<< *EOF' ${filename}; then
        process="true";
    fi;
    if [[ "${process}" == "true" ]];then 
        # Remove all newlines from the end of the file.
        ${vf_cmd_sed} -i -e :a -e '/^\n*$/{$d;N;ba' -e '}' "${filename}";
        
        # Ensure that the '}' on the last line is followed by a semicolon if it's not already.
        ${vf_cmd_sed} -i '$s/}$/};/' "${filename}";
        
        # Add a final newline after the '};' and make it the last line of the file.
        ${vf_cmd_sed} -i -e '$a\' "${filename}";
        
        # Display to screen on same line the file in the loop.
        printf "\r${yl}--> Appending heredoc function file:${rs} %s" "${filename}";
        
        # Append the content to '/tmp/bx-framework' and '/tmp/bx-framework.debug'.
        cat "${filename}" >> "/tmp/bx-framework";
        cat "${filename}" >> "/tmp/bx-framework.debug";

        # Clear the line for the next iteration.
        printf "\033[K";
    fi;
    process="false";
done;
${spacer};

# ---------------------------------------------
# [8] Append last minimised functions after heredoc functions.

${spacer};
${equalsLine};
printf "%b\n" "${cyB}Step 7: Append '/tmp/bx-main' to '/tmp/bx-framework'.${rs}";
${spacer};
printf "%b\n" "${yl}--> info:${rs} Create debug file.";
printf "%b\n" "${yl}--> info:${rs} Insert hashbang into minimised files.";

cat /tmp/bx-main >> "/tmp/bx-framework";
cat /tmp/bx-main >> "/tmp/bx-framework.debug";

# Insert the new hashbang at line 1.
gsed -i '1i #!/usr/bin/env bash' "/tmp/bx-framework";
gsed -i '1i #!/usr/bin/env bash' "/tmp/bx-framework.debug";

# ---------------------------------------------
# [9] Move edit file to the bash-x folder.

${spacer};
${equalsLine};
printf "%b\n" "${cyB}Step 8: Move tmp files to bash-x folder.${rs}";
${spacer};

printf "%b\t\t%s\n" "${yl}--> info: ${rs} Create target folders in:" "${cy}${vf_path_bashx}${rs}";
mkdir -p  "${vf_path_bashx}";
mkdir -p  "${vf_path_bashx}json";
mkdir -p  "${vf_path_bashx}jq";
mkdir -p  "${vf_path_bashx}README";

cp -r ${vf_path_framework_home}json          "${vf_path_bashx}";
cp -r ${vf_path_framework_home}jq            "${vf_path_bashx}";
#cp -r ${vf_path_framework_home}README        "${vf_path_bashx}";
#cp    ${vf_path_framework_home}README.md     "${vf_path_bashx}";
cp    ${vf_path_framework_home}.gitignore    "${vf_path_bashx}";

# Change these two json elements from bash-x-dev to bash-x.
${jq} '.framework.name = "bash-x"' ${vf_path_framework_home}json/framework.json  > /tmp/bx-tmpjson.json && mv /tmp/bx-tmpjson.json ${vf_path_bashx}json/framework.json;
${jq} '.framework.repo = "git.swisscom.com/projects/CSL/repos/bash-x/"' ${vf_path_bashx}json/framework.json  > /tmp/bx-tmpjson.json && mv /tmp/bx-tmpjson.json ${vf_path_bashx}json/framework.json;

mv /tmp/bx-framework        "${vf_path_bashx}bash-x";
mv /tmp/bx-framework.debug  "${vf_path_bashx}bash-x.debug";

printf "%b\t%s\n" "${yl}--> info: ${rs} Assign execute permission on file." "${cy}${vf_path_bashx}bash-x${rs}";
printf "%b\t%s\n" "${yl}--> info: ${rs} Assign execute permission on file." "${cy}${vf_path_bashx}bash-x.debug${rs}";
chmod +x "${vf_path_bashx}bash-x";
chmod +x "${vf_path_bashx}bash-x.debug";
printf "%s\n" "";
};
