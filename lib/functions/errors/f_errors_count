function f_errors_count(){

# About:
# - Count the number of errors for the current stage.
# - Return number of errors to calling function.

# Usage:
# result=$(f_errors_count "1");
# - The second parameter is the stage number to check.

# ---------------------------------------------------------------
# [1] Declare variables with local scope to this function. 

local stage_number;
local count;
local pid_stage_exitcode;
local pid;
local stage;
local exitcode;
local array_stage_exitcode;

# ---------------------------------------------------------------
# [2] Assign passed parameter(s). 

stage_number="${1}";

# ---------------------------------------------------------------
# [3] Count the number of errors for this stage.

count="0";
for pid_stage_exitcode in ${!A_project_stage_errors[@]}; do
    
    # Either pid number or 'nopid'.
    pid=$(echo ${pid_stage_exitcode}      | cut -d ',' -f1);
    # The stage number - e.g. 2
    stage=$(echo ${pid_stage_exitcode}    | cut -d ',' -f2);
    # The exitcode integer that maps to json array. e.g 3
    exitcode=$(echo ${pid_stage_exitcode} | cut -d ',' -f3);

    array_stage_exitcode="vj_errors_s${stage}_e${exitcode}";

    # Match on stage error codes.
    if [[ "${stage}" == "${stage_number}" ]]; then
        ((count++));
    fi;
done;  

# ---------------------------------------------------------------
# [4] Return to the calling function 0 or more errors.

printf "${count}";
};
